(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "2%"
                      :height "100%"
                      :anchor "left center")
  :exclusive true
  :namespace "eww-sidebar";
  (bar))

(defpoll battery :interval "1s"
  `upower -d | rg 'percentage: *([0-9]*)%' -or '$1' | head -n 1`)

(defwidget power []
  (box :orientation "v"
       :class "metric"
       :space-evenly false
       :spacing 10
       :halign "center"
    (label :text "󰁹")
    (progress :value battery
           :halign "center"
           :orientation "v")))

(defwidget bar []
  (centerbox :orientation "v"
    (power)
    (workspaces)
    (bottom)))

(defpoll time :interval "1s"
  `date +%H%n%M`)

(defpoll brightness :interval "1s"
  `brightnessctl get`)  

(defpoll audio :interval "1s"
  `wpctl get-volume @DEFAULT_AUDIO_SINK@`)

(defpoll workspaces_unsorted :interval "500ms"
  `niri-unwrapped msg --json workspaces`)

(defwidget bottom []
  (box :class "bottom"
       :orientation "v"
       :halign "center"
       :valign "end"
       :spacing 20
       :space-evenly false
    (metric :label "󰌵"
            :value brightness
            :onchange "brightnessctl set {}"
            :max 256)
    (metric :label ""
            :value {audio * 100}
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%"
            :max 101)
    (label :justify "fill" :text time)
    (label :class "logo" :text "󱄅")))

(defwidget metric [label value onchange max]
  (box :orientation "v"
       :class "metric"
       :space-evenly false
       :spacing 1
    (scale :min 0
           :max max
           :active {onchange != ""}
           :value value
           :onchange onchange
           :orientation "v"
           :flipped true)
    (box :class "label" label)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "v"
       :space-evenly true
       :halign "center"
       :spacing 10
    (for workspace in {jq(workspaces_unsorted, "sort_by(.idx)")}
        (label :text {workspace.is_focused ? "" : ""}))))

