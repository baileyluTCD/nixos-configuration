(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "2%"
                      :height "100%"
                      :anchor "left center")
  :exclusive true
  :namespace "eww-sidebar"
  (bar))

(defpoll battery :interval "1s"
  `upower -d | rg 'percentage: *([0-9]*)%' -or '$1' | head -n 1`)

(defwidget power []
  (box :orientation "v"
       :class "metric"
       :space-evenly false
       :spacing 10
       :halign "center"
    (label :text "󰁹")
    (progress :value battery
           :halign "center"
           :orientation "v")))

(defwidget bar []
  (box :orientation "h"
       :space-evenly false
       :halign "center"
    (centerbox :orientation "v"
               :class "bar-container"
      (power)
      (workspaces)
      (bottom))
    (centerbox :orientation "v"
               :class "menu-container"
        (revealer :reveal false)
        (session_launcher)
        (start_menu))))

(defpoll time :interval "1s"
  `date +%H%n%M`)

(defpoll brightness :interval "1s"
  `brightnessctl get`)  

(defpoll audio :interval "1s"
  `wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -o "[0-9|\.]*"`)

(defpoll workspaces_unsorted :interval "500ms"
  `niri-unwrapped msg --json workspaces`)

(defvar show_start_menu false)

(defwidget bottom []
  (box :class "bottom"
       :orientation "v"
       :halign "center"
       :valign "end"
       :spacing 20
       :space-evenly false
    (metric :label {brightness < 25 ? "󰌶" : "󰌵"}
            :value brightness
            :value-pos brightness
            :onchange "brightnessctl set {}"
            :max 256)
    (metric :label {audio < 0.1 ? "󰝟" : "󰕾"}
            :value {audio * 100}
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%"
            :max 101)
    (label :justify "fill" :text time)
    (eventbox :onhover "${EWW_CMD} update show_start_menu=true"
              :onhoverlost "${EWW_CMD} update show_start_menu=false"
      (label :text "󱄅" :class {show_start_menu ? "color-logo logo" : "logo"}))))

(defwidget metric [label value onchange max]
  (box :orientation "v"
       :class "metric"
       :space-evenly false
       :spacing 1
    (scale :min 0
           :max max
           :active {onchange != ""}
           :value value
           :onchange onchange
           :orientation "v"
           :flipped true)
    (box :class "label" label)))

(defvar show_sessions false)

(defwidget workspaces []
  (eventbox :onhover "${EWW_CMD} update show_sessions=true"
            :onhoverlost "${EWW_CMD} update show_sessions=false"
    (box :class "workspaces-and-sessions"
           :orientation "h"
           :space-evenly false
           :halign "center"
      (box :class "workspaces"
             :orientation "v"
             :space-evenly true
             :halign "center"
             :spacing 10
        (for workspace in {jq(workspaces_unsorted, "sort_by(.idx)")}
          (label :text {workspace.is_focused ? "" : ""}
                 :class {show_sessions ? "color-logo" : ""})))
      )))

(defwidget session_launcher []
    (revealer :transition "slideright"
              :reveal show_sessions
      (eventbox :onhover "${EWW_CMD} update show_sessions=true"
            :onhoverlost "${EWW_CMD} update show_sessions=false"
        (box :class "sessions"
               :orientation "v"
               :space-evenly false
               :valign "center"
               :halign "start"
               :spacing 20
          (label :text "Launch Sessions"
                 :class "title")
          (menu_option :text "Programming"
                 :action "start-session -p")
          (menu_option :text "Notes"
                 :action "start-session -n")))))

(defwidget start_menu []
    (revealer :transition "slideright"
              :reveal show_start_menu
      (eventbox :onhover "${EWW_CMD} update show_start_menu=true"
                :onhoverlost "${EWW_CMD} update show_start_menu=false"
        (box :class "start"
               :orientation "v"
               :space-evenly false
               :halign "start"
               :valign "end"
               :spacing 10
          (label :text "Start Menu"
                 :class "title")
          (calendar)
          (menu_option :text "Launch Apps"
                       :action "sysmenu")
          (menu_option :text "Volume Control"
                       :action "pavucontrol")
          (menu_option :text "Power Off"
                       :action "systemctl poweroff")))))

(defwidget menu_option [text action]
  (eventbox :onclick "${action} &"
            :class "menu_option"
            :timeout "5s"
  (label :xalign 0
         :text text)))
